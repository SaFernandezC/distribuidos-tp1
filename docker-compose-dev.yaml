version: '3'
services:
  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: rabbitmq.dockerfile
    ports:
      - 15672:15672
    networks:
      - testing_net
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 10s
        timeout: 5s
        retries: 10

  accepter:
    container_name: accepter
    image: accepter:latest
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1

  parser:
    container_name: parser
    image: parser:latest
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1

  prectot_filter:
    container_name: prectot_filter
    image: filter:latest
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1
      - SHOW_LOGS=False # TODO: Lo puedo hacer con el logger y diferentes niveles de log :D
      - INPUT_EXCHANGE=weathers
      - INPUT_EXCHANGE_TYPE=fanout
      - INPUT_QUEUE=prectot_filter
      - INPUT_BIND=True
      - OUTPUT_QUEUE_NAME=date_modifier
      - CANT_CONDICIONES=1
      # - SELECT=city,date,prectot
      - FILTER_0=1,int,prectot,gt,30

  filter_trips_query1:
    container_name: filter_trips_query1
    image: filter:latest
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1
      - SHOW_LOGS=False
      - INPUT_EXCHANGE=trips
      - INPUT_EXCHANGE_TYPE=fanout
      - INPUT_QUEUE=filter_trips_query1
      - INPUT_BIND=True
      - OUTPUT_QUEUE_NAME=joiner_query_1
      - CANT_CONDICIONES=0
      - SELECT=city,start_date,duration_sec

  date_modifier:
    container_name: date_modifier
    image: date_modifier:latest
    restart: on-failure
    depends_on:
      - prectot_filter
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1
      - INPUT_QUEUE_NAME=date_modifier
      - OUTPUT_EXCHANGE=joiner_query_1
      - OUTPUT_EXCHANGE_TYPE=fanout


  joiner_query_1:
    container_name: joiner_query_1
    image: joiner:latest
    restart: on-failure
    depends_on:
      - date_modifier
      - parser
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1
      - INPUT_EXCHANGE_1=joiner_query_1
      - INPUT_EXCHANGE_TYPE_1=fanout
      - INPUT_BIND_1=True
      - INPUT_QUEUE_NAME_2=joiner_query_1
      - OUTPUT_QUEUE_NAME=groupby_query_1
      - PRIMARY_KEY=city,date
      - PRIMARY_KEY_2=city,start_date
      - JOIN_ON=rigth
      - SELECT=start_date,duration_sec
      - NEEDED_EOF_1=1

  groupby_query_1:
    container_name: groupby_query_1
    image: groupby:latest
    restart: on-failure
    depends_on:
      - joiner_query_1
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1
      - INPUT_QUEUE_NAME=groupby_query_1
      - PRIMARY_KEY=start_date
      - AGG=avg
      - FIELD_TO_AGREGATE=duration_sec


  filter_trips_year:
    container_name: filter_trips_year
    image: filter:latest
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    links: 
      - rabbitmq
    networks:
      - testing_net
    environment:
      - PYTHONUNBUFFERED=1
      - SHOW_LOGS=True
      - INPUT_EXCHANGE=trips
      - INPUT_EXCHANGE_TYPE=fanout
      - INPUT_QUEUE=filter_trips_year
      - INPUT_BIND=True
      - OUTPUT_QUEUE_NAME=joiner_query_2
      - SELECT=start_station_code,yearid
      - CANT_CONDICIONES=2
      - FILTER_0=1,int,yearid,eq,2016
      - FILTER_1=1,int,yearid,eq,2017
      - OPERATORS=OR # Debe haber (#filtros - 1) operadores logicos

networks:
  testing_net:
    # external: true
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.125.0/24